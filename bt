AWSTemplateFormatVersion: '2010-09-09'
Description: Provision ECS Fargate type ECS Service for testing SpringBoot Blue/Green Deployment
Parameters:
  ApplicationShortName:
    Type: String
    Description: eCOS SpringBoot Blue/Green
  ClusterName:
    Type: String
  ServiceName:
    Type: String
  ContainerName:
    Type: String
    Description: Container Name
  ContainerImage:
    Type: String
    Description: Container Image
  ContainerPort:
    Type: Number
  DesiredCount:
    Type: String
    Description: Desired number of task
  Cpu:
    Type: Number
    Description: Cpu
  Memory:
    Type: Number
    Description: Memory
  Lifecycle:
    Type: String
  ServiceSecurityGroupName:
    Type: 'List<AWS::EC2::SecurityGroup::Id>'
    Description: SecurityGroup for the ENI
  EcsServiceSubnets:
    Type: 'List<AWS::EC2::Subnet::Id>'
  TargetGroupArn:
    Type: String
  TargetGroupAdd:
    Type: String
  TaskRoleArn:
    Type: String
  AssetID:
    Type: String
  DesiredCount:
    Type: Number
  S3ConfigBucket:
    Type: String
  NginxContainerName:
    Type: String
  NginxContainerImage:
    Type: String
  NginxContainerPort:
    Type: Number
  NginxMemory:
    Type: Number
  AwsLifeCycle:
    Type: String
  Path:
    Type: String
    Default: "*"
    Description: A path on the public load balancer that this service
                 should be connected to. Use * to send all load balancer
                 traffic to this service.
  VPC:
    Description: VPC of MF Account
    Type: AWS::EC2::VPC::Id
  Priority:
    Type: Number
    Default: 2
    Description: The priority for the routing rule added to the load balancer.
                 This only applies if your have multiple services which have been
                 assigned to different paths on the load balancer.
  Listener:
    Type: String
    Description: HTTPS Listener
  TargetGroupName:
    Type: String
    Description: Target Group Name used in the Target Group Creation
  HealthCheckUrl:
    Type: String
    Description: Health Check URL used in the TargetGroup
  LoadBalancerDeregistrationDelay:
    Description: 'The amount time (in seconds) to wait before changing the state of a deregistering target from draining to unused.'
    Type: Number
    Default: 60
    
Resources:

  EcsService:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerRule
    Properties:
      ServiceName: !Ref ServiceName
      Cluster: !Ref ClusterName
      DesiredCount: !Ref DesiredCount
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups: !Ref ServiceSecurityGroupName
          Subnets: !Ref EcsServiceSubnets
      LoadBalancers:
        - ContainerName: !Ref NginxContainerName
          ContainerPort: !Ref NginxContainerPort
          TargetGroupArn: !Ref 'TargetGroup'
      TaskDefinition: !Ref 'TaskDefinition'

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: !Ref Cpu
      Memory: !Ref Memory
      Family: !Ref ServiceName
      ExecutionRoleArn: !Ref TaskRoleArn
      TaskRoleArn: !Ref TaskRoleArn
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      ContainerDefinitions:
        - Name: !Ref ContainerName
          Essential: 'true'
          Image: !Ref ContainerImage
          Memory: !Ref Memory
          Environment :
           - Name: lifecycle
             Value: POC
           - Name: S3_CONFIG_ENABLED
             Value: false
           - Name: S3_CONFIG_BUCKET
             Value: !Ref S3ConfigBucket
          EntryPoint: 
           - "sh"
           - "-c"
           - "/export/webapps/springboot/fnma/sbruntimectl.sh -d aws -i aws-springboot -a start"
          PortMappings:
            - ContainerPort: !Ref ContainerPort
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub '/aws/ecs/${ClusterName}'
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref ServiceName
              awslogs-create-group: true
        - Name: !Ref NginxContainerName
          Essential: 'true'
          Image: '825597222502.dkr.ecr.us-east-1.amazonaws.com/f4i/base:mwnginx2.0'
          Memory: !Ref NginxMemory
          EntryPoint:
           - "sh"
           - "-c"
           - "/etc/pki/tls/certs/entrypoint.sh"
          Environment:
            - Name: APP_NAME
              Value: !Ref ApplicationShortName
            - Name: APP_ENV
              Value: !Ref AwsLifeCycle
            - Name: APP_CLUSTER_NAME
              Value: !Ref ClusterName
            - Name: APP_REGION
              Value: !Ref AWS::Region
            - Name: S3_CERT_BUCKET
              Value: 'f4i-devl-csbu-us-east-1/provisioning/certs/ecs/f4i-ecs-ecos'
            - Name: S3_CERT_ENABLED
              Value: true 
          PortMappings:
            - ContainerPort: !Ref NginxContainerPort
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub '/aws/ecs/${ClusterName}'
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref NginxContainerName
              awslogs-create-group: true       

  # target group to receive all requests from the Load Balancer.
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 45
      HealthCheckPath: !Sub '${HealthCheckUrl}'   #Need to add actuator in springboot to make this generic
      HealthCheckProtocol: HTTPS
      HealthCheckTimeoutSeconds: 30
      HealthyThresholdCount: 5
      TargetType: ip
      Name: !Sub '${ApplicationShortName}-${TargetGroupName}'
      Port: !Ref 'NginxContainerPort'
      Protocol: HTTPS
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: !Ref LoadBalancerDeregistrationDelay

  # Create a rule on the load balancer for routing traffic to the target group
  LoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    DependsOn: TargetGroup
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'TargetGroup'
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values: [!Ref 'Path']
      ListenerArn: !Ref Listener
         # Fn::ImportValue:
           # !Join [':', [!Ref 'ParentStack', 'HttpsListener']]
      Priority: !Ref 'Priority'
